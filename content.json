{"pages":[{"title":"404","text":"","path":"404/index.html","date":"04-01","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"04-01","excerpt":""},{"title":"about","text":"","path":"about/index.html","date":"04-01","excerpt":""}],"posts":[{"title":"记录型信号量的定义","text":"123456789101112131415161718192021222324/*记录型信号量的定义*/typedef struct&#123; int value;//资源剩余数 struct process *L;//等待队列 &#125;semaphore;/*某进程需要使用资源时，通过wait原语申请*/void wait(semaphore S)&#123; S.value--; if(S.value&lt;0)&#123; block(S.L);/*如果剩余资源数不够 ， 使用block原语使进程从运行态进入阻塞态，并 把挂到信号量S的等待队列（即阻塞队列）中*/ &#125;&#125;/*进程使用完资源后，通过signal原语释放*/void signal(semaphore S)&#123; S.value++; if(S.value&lt;=0)&#123; wakeup(S,L);/*释放资源后，若还有别的 进程在等待这种资源，则使用wakeup原语唤醒等待 队列中的一个进程，该进程从阻塞态变为就绪态*/ &#125;","path":"2019/04/01/记录型信号量的定义/","date":"04-01","excerpt":"","tags":[]},{"title":"23种设计模式之工厂模式","text":"","path":"2019/03/24/23种设计模式之工厂模式/","date":"03-24","excerpt":"","tags":[]},{"title":"我的第一篇博客","text":"第一章内容 第二章内容 参考文献","path":"2019/03/18/我的第一篇博客/","date":"03-18","excerpt":"","tags":[]},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","path":"2019/03/18/hello-world/","date":"03-18","excerpt":"","tags":[]}]}